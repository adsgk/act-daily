#include<iostream>
#include<algorithm>
#include<string>
#include<vector>
#include<map>
#include<cmath>
#include<cstring>
#include <iomanip>
#include<set>
using namespace std;
using ll = long long;
const ll MOD = 1e9 + 7;
//求GCD
ll gcd(ll a,ll b) {
    return b>0 ? gcd(b,a%b):a;
}
//快速幂
ll ksm(ll a,ll b){
    ll res=1;
    while(b){
        if(b&1) (res*=a)%=MOD;
        (a*=a)%=MOD;
        b>>=1;
    }
    return res;
}
//组合数
ll C(ll n, ll m){
    ll res = 1;
    for (ll i = 1; i <= m; ++i){
        res = res * (n - m + i) / i;        // 先乘后除
    }
    return res;
}
ll A(ll n, ll m) {
    ll res = 1;
    for (int i = m; i >= 1; i--) {
        res *= n;
        n--;
    }
    return res;
}
/*
以上均为函数模板****************************
*/
int lowbit(int x) {
    return x & -x;
}
int qpow(int a,int b=MOD-2){
	int ret=1;
	for(;b;b>>=1,a=(ll)a*a%MOD)if(b&1)ret=(ll)ret*a%MOD;
	return ret%MOD;
}

struct node
{
   int u,v ,w;
};



const int N = 2e5 + 5;
vector<int> a(N);
int n, k;
bool judge(int x)
{
    int res = 0;
    int i = 1;
    int sum = 0;
    vector<int> b(x + 5, 0);
    for (;i <= n; ++i)
    {
        if(a[i] < x && b[a[i]] == 0)
        {
            b[a[i]] = 1;
            sum++;
        }
        if(sum >= x){res++; sum = 0;
            fill(b.begin(), b.end(), 0);
        }
    }
    if (res < k)return false;
    return true;
}

void solve() {

    cin>>n>>k;

    for (int i = 1; i <= n; ++i) {cin >> a[i];}
    int l = 0, r = 5;
    while(l <= r)
    {
        cout << l << ' ' << r << endl;
        int mid = (l + r) / 2;
        if (judge(mid))l = mid + 1;
        else r = mid - 1;
    }
    cout << r << endl;
    return ;
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    int t = 1;
    cin >> t;
    while(t--)solve();
    return 0;
}

